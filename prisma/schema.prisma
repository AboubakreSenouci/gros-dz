generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Enumerations

enum UserRole {
  SUPPLIER
  BUYER
  ADMIN
}

enum ProductVisibility {
  PUBLIC
  PRIVATE
}

enum OrderType {
  PIECE
  BOX
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELED
  DECLINED
  RETURNED
  COMPLETED
}

enum InquiryStatus {
  PENDING
  ACCEPTED
  REJECTED
  CLOSED
}

model Address {
  id       String @id @default(uuid())
  province String
  city     String
  street   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company                  Company[] @relation("CompanyAddress")
  companyDeliveryAddresses Company[] @relation("CompanyDeliveryAddress")

  @@map("address")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  passwordHash String
  role         UserRole

  image    String?
  sessions Session[]
  accounts Account[]

  phoneNumber         String?
  phoneNumberVerified Boolean?

  email         String
  emailVerified Boolean

  companyId String?
  company  Company? @relation("CompanyUsers", fields: [companyId], references: [id])

  Company Company[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([phoneNumber])
  @@unique([email])
  @@map("user")
}

model Company {
  id          String  @id @default(uuid())
  name        String
  description String?
  logoUrl     String?

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  addressId String?
  address   Address? @relation("CompanyAddress", fields: [addressId], references: [id])

  deliveryAddresses Address[] @relation("CompanyDeliveryAddress")

  users User[] @relation("CompanyUsers")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @unique

  products  Product[]
  shortlist Shortlist[]

  buyerOrders    Order[] @relation("BuyerCompanyOrders")
  supplierOrders Order[] @relation("SupplierCompanyOrders")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  @@map("company")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  nameArabic  String?
  description String?
  images      String[]

  category      Category  @relation("ProductCategory", fields: [categoryId], references: [id])
  categoryId    String
  subCategory   Category? @relation("ProductSubCategory", fields: [subCategoryId], references: [id])
  subCategoryId String?

  price             Int
  quantityAvailable Int
  minOrderQuantity  Int

  visibility ProductVisibility @default(PUBLIC)

  isDeliveryAvailable Boolean @default(true)
  isSampleAvailable   Boolean @default(false)
  samplePrice         Int?

  orderType            OrderType
  numberOfPiecesPerBox Int?
  rating               Int       @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  priceVariants ProductPriceVariant[]
  orders        Order[]
  shortlistedBy Shortlist[]

  @@map("product")
}

model Category {
  id         String @id @default(uuid())
  name       String
  nameFrench String
  nameArabic String
  slug       String

  parentCategory   Category? @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  parentCategoryId String?

  categories Category[] @relation("CategoryToCategory")

  product     Product[] @relation("ProductCategory")
  subProducts Product[] @relation("ProductSubCategory")

  Company Company[]
}

model ProductPriceVariant {
  id        String  @id @default(uuid())
  quantity  Int
  price     Int
  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?

  @@map("product_price_variant")
}

model Order {
  id                    String      @id @default(uuid())
  orderNumber           String      @unique
  quantity              Int
  totalPrice            Int
  shippingDeliveryPrice Int         @default(0)
  status                OrderStatus
  paymentMethod         String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])

  buyerCompanyId String
  buyerCompany   Company @relation("BuyerCompanyOrders", fields: [buyerCompanyId], references: [id])

  supplierCompanyId String
  supplierCompany   Company @relation("SupplierCompanyOrders", fields: [supplierCompanyId], references: [id])

  @@map("order")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Shortlist {
  id        String  @id @default(uuid())
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([companyId, productId], name: "companyId_productId")
  @@map("shortlist")
}

model OrderCounter {
  id         Int @id @default(1)
  lastNumber Int

  @@map("order_counter")
}
