// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  SUPPLIER
  BUYER
  ADMIN
}

model User {
  id            String    @id @default(uuid())
  name          String?
  passwordHash  String
  role          String    @default("buyer")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  phoneNumber         String?
  phoneNumberVerified Boolean?

  email String

  supplierProfile SupplierProfile?
  buyerProfile    BuyerProfile?

  orders Order[]

  @@unique([phoneNumber])
  @@unique([email])
  @@map("user")
}

model SupplierProfile {
  id               String   @id @default(uuid())
  companyName      String
  businessCategory String
  address          String?
  description      String?
  logoUrl          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  products Product[]
  orders   Order[]
}

model BuyerProfile {
  id          String  @id @default(uuid())
  userId      String  @unique
  companyName String?
  address     String?

  user      User      @relation(fields: [userId], references: [id])
  inquiries Inquiry[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id                String   @id @default(uuid())
  name              String
  description       String?
  images            String[]
  category          String
  price             Int
  basePrice         Int?     @default(0)
  quantityAvailable Int
  minOrderQuantity  Int
  isVisible         Boolean  @default(true)
  deliveryPossible  Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  supplier   SupplierProfile @relation(fields: [supplierId], references: [id])
  supplierId String

  inquiries     Inquiry[]
  priceVariants PriceVariant[]
  orders        Order[]

  @@map("product")
}

model PriceVariant {
  id        String  @id @default(uuid())
  quantity  Int
  price     Int
  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("price_variant")
}

model Order {
  id                    String      @id @default(uuid())
  orderNumber           String      @unique
  quantity              Int
  totalPrice            Int
  shippingDeliveryPrice Int         @default(0)
  status                OrderStatus
  paymentMethod         String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  productId String
  product   Product @relation(fields: [productId], references: [id])

  buyerId String
  buyer   BuyerProfile @relation(fields: [buyerId], references: [id])

  supplierId String
  supplier   SupplierProfile @relation(fields: [supplierId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@map("order")
}

enum OrderStatus {
  PENDING
  PROCESSING
  DELIVERED
  CANCELED
  DECLINED
  RETURNED
  COMPLETED
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

enum InquiryStatus {
  PENDING
  ACCEPTED
  REJECTED
  CLOSED
}

model Inquiry {
  id        String        @id @default(uuid())
  message   String?
  createdAt DateTime      @default(now()) @db.Timestamptz(6)
  status    InquiryStatus

  buyerId String
  buyer   BuyerProfile @relation(fields: [buyerId], references: [id], onDelete: Cascade)

  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inquiries")
}
